trigger:
- '*'

#pool:
#  vmImage: ubuntu-latest

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK 6.x'
  inputs:
    version: '6.x'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

- task: TerraformInstaller@0
  displayName: 'Installing Terraform'
  inputs:
    terraformVersion: '1.5.7'

- task: terraform@0
  displayName: Terraform Init
  inputs:
    command: 'init'
    providerAzureConnectedServiceName: 'Game Demo Example - DEV'
    backendAzureProviderStorageAccountName: 'gamedemostgacct'

- task: terraform@0
  displayName: Terraform Plan
  inputs:
    command: 'plan'
    providerAzureConnectedServiceName: 'Game Demo Example - DEV'
    backendAzureProviderStorageAccountName: 'gamedemostgacct'

#- script: |
#    terraform --version
#    terraform init -backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="key=$(key)" -backend-config="access_key=$(accessKey)"
#    terraform plan -out=tfplan
#  displayName: 'Terraform Init and Plan'


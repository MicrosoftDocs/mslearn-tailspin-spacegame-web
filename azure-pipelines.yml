name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy








variables:
  - name: artifactName
    value: 'game-demo-drop'
  - name: backendServiceArm
    value: 'azurerm-service-connection'
  - name: backendAzureRmResourceGroupName
    value: 'tfstate'
  - name: backendAzureRmStorageAccountName
    value: 'tfstatestgacct27555'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: './game-demo.tfstate'
  - name: backendAzureRmResourceGroupLocation
    value: 'eastus'
  - name: backendAzureRmStorageAccountSku
    value: 'Standard_RAGRS'
  - name: terraform_version
    value: '1.5.7'
  - name: action
    value: ${{ parameters.Action }}

trigger:
- '*'

#pool:
#  vmImage: ubuntu-latest



stages :
  - stage: build_and_publish_app
    jobs:
      - job: build_and_publish
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK 6.x'
            inputs:
              version: '6.x'
          - task: Npm@1
            displayName: 'Run npm install'
            inputs:
              verbose: false
          - script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
            displayName: 'Compile Sass assets'
          - task: gulp@1
            displayName: 'Run gulp tasks'
          - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
            displayName: 'Write build info'
            workingDirectory: Tailspin.SpaceGame.Web/wwwroot
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - Release'
            inputs:
              command: 'build'
              arguments: '--no-restore --configuration Release'
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: 'Publish the project - Release'
            inputs:
              command: 'publish'
              projects: '**/*.csproj'
              publishWebProjects: false
              arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
              zipAfterPublish: true
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact: drop'
            inputs:
              ArtifactName: '${{ variables.artifactName }}'
            condition: succeeded()
          - task: Bash@3
            displayName: List Files Post Publish
            inputs:
              targetType: inline
              script: 'ls -al $(Build.ArtifactStagingDirectory)/Release'

  - stage: terraform_plan_apply
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_apply
        steps:
          #- task: DownloadPipelineArtifact@1
          #  inputs:
          #    source: 'current'
          #    artifact: '$(variables.artifactName)'
          #    path: '$(Pipeline.Workspace)/$(variables.artifactName)'
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current' # 'current' | 'specific'. Required. Download artifacts produced by. Default: current.
              artifactName: '${{ variables.artifactName }}' # string. Required when downloadType == single. Artifact name. 
              downloadPath: '$(System.ArtifactsDirectory)' # string. Required. Destination directory. Default: $(System.ArtifactsDirectory).
          - task: Bash@3
            displayName: List Files Post Publish
            inputs:
              targetType: inline
              script: 'ls -al $(System.ArtifactsDirectory)/*'
          - task: TerraformInstaller@0
            displayName: 'Installing Terraform'
            inputs:
              terraformVersion: '${{ variables.terraform_version }}'
          - task: TerraformCLI@1
            displayName: 'terraform init'
            inputs:
              command: init
              backendType: azurerm
              # Service connection to authorize backend access. Supports Subscription & Management Group Scope
              backendServiceArm: '${{ variables.backendServiceArm }}'
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'    
              backendAzureRmResourceGroupLocation: '${{ variables.backendAzureRmResourceGroupLocation }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmStorageAccountSku: '${{ variables.backendAzureRmStorageAccountSku }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
          - task: TerraformCLI@1
            displayName: 'terraform plan'
            condition: and(succeeded(), eq(variables['Action'], 'Plan'))            
            inputs:
              command: plan
              environmentServiceName: 'azurerm-service-connection'
              publishPlanResults: 'current_tf_plan'
              commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode'
              # name of the secure file to use. Can be standard terraform vars file or .env file.
              #secureVarsFile: my-secure-file.env
              # specify a variable input via pipeline variable
              #commandOptions: '-var secret=$(mySecretPipelineVar)'            
          - task: TerraformCLI@1
            displayName: 'terraform apply'
            condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
            inputs:
              command: apply
              environmentServiceName: 'azurerm-service-connection'
              commandOptions: '$(System.DefaultWorkingDirectory)/terraform.tfplan'
          #- task: TerraformCLI@1
          #  displayName: 'terraform output'
          #  inputs:
          #    command: output
              # ensure working directory targets same directory as apply step
              # if not specified $(System.DefaultWorkingDirectory) will be used
              # workingDirectory: $(my_terraform_templates_dir)
              
#- script: |
#    terraform --version
#    terraform init -backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="key=$(key)" -backend-config="access_key=$(accessKey)"
#    terraform plan -out=tfplan
#  displayName: 'Terraform Init and Plan'

#- task: ManualValidation@0
#  timeoutInMinutes: 60 # task times out in 1 hr
#  inputs:
#    notifyUsers: |
#      mrbdg@hotmail.com
#    instructions: 'Please validate the build configuration and resume'
#    onTimeout: 'reject'  

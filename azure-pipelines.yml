name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

parameters:
 
  - name: Action
    displayName: Action
    type: string
    default: 'Plan'
    values:
    - Plan
    - Apply
    - Destroy

variables:
  - name: backendServiceArm
    value: 'azurerm-service-connection'
  - name: backendAzureRmResourceGroupName
    value: 'tfstate'
  - name: backendAzureRmStorageAccountName
    value: 'tfstatestgacct27555'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: backendAzureRmKey
    value: './game-demo.tfstate'
  - name: backendAzureRmResourceGroupLocation
    value: 'eastus'
  - name: backendAzureRmStorageAccountSku
    value: 'Standard_RAGRS'
  - name: terraform_version
    value: '1.5.7'
  - name: action
    value: ${{ parameters.Action }}

trigger:
- '*'

#pool:
#  vmImage: ubuntu-latest

stages :  
  - stage: terraform_plan_apply
    condition: ne('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_apply
        steps:
          - task: TerraformInstaller@0
            displayName: 'Installing Terraform'
            inputs:
              terraformVersion: '${{ variables.terraform_version }}'
          - task: TerraformCLI@1
            displayName: 'terraform init'
            inputs:
              command: init
              backendType: azurerm
              # Service connection to authorize backend access. Supports Subscription & Management Group Scope
              backendServiceArm: '${{ variables.backendServiceArm }}'
              backendAzureRmResourceGroupName: '${{ variables.backendAzureRmResourceGroupName }}'    
              backendAzureRmResourceGroupLocation: '${{ variables.backendAzureRmResourceGroupLocation }}'
              backendAzureRmStorageAccountName: '${{ variables.backendAzureRmStorageAccountName }}'
              backendAzureRmStorageAccountSku: '${{ variables.backendAzureRmStorageAccountSku }}'
              backendAzureRmContainerName: '${{ variables.backendAzureRmContainerName }}'
              backendAzureRmKey: '${{ variables.backendAzureRmKey }}'
            - task: TerraformCLI@1
              displayName: 'terraform plan'
              inputs:
                command: plan
                environmentServiceName: 'azurerm-service-connection'
                # name of the secure file to use. Can be standard terraform vars file or .env file.
                #secureVarsFile: my-secure-file.env
                # specify a variable input via pipeline variable
                #commandOptions: '-var secret=$(mySecretPipelineVar)'

#- script: |
#    terraform --version
#    terraform init -backend-config="storage_account_name=$(storageAccountName)" -backend-config="container_name=$(containerName)" -backend-config="key=$(key)" -backend-config="access_key=$(accessKey)"
#    terraform plan -out=tfplan
#  displayName: 'Terraform Init and Plan'


trigger:
- '*'

pool:
  name: 'RetoAzure'  # Nombre del pool donde está MyAgent
  demands:
    - agent.name -equals MyAgent

variables:
  buildConfiguration: 'Release'

steps:
# ✅ Instalar .NET SDK 6.x
- task: UseDotNet@2
  displayName: 'Use .NET SDK 6.x'
  inputs:
    packageType: sdk
    version: '6.x'

# ✅ Instalar Node.js 16.x correctamente en Azure DevOps
- task: UseNode@1
  displayName: 'Install Node.js 16.x'
  inputs:
    version: '16.x'

# ✅ Limpiar caché de npm antes de instalar dependencias
- script: 'npm cache clean --force'
  displayName: 'Clean NPM cache'

# ✅ Eliminar node_modules si existe (para evitar errores de permisos)
- script: 'if exist node_modules rmdir /s /q node_modules'
  displayName: 'Delete node_modules directory'
  condition: succeededOrFailed()

# ✅ Instalar dependencias con npm
- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false
    arguments: '--no-optional'

# ✅ Compilar archivos Sass
- script: 'npx sass Tailspin.SpaceGame.Web/wwwroot --no-source-map --style=compressed'
  displayName: 'Compile Sass assets'


# ✅ Instalar Gulp CLI globalmente antes de usar Gulp
- script: 'npm install --global gulp-cli'
  displayName: 'Install Gulp CLI globally'

# ✅ Ejecutar tareas de Gulp usando el binario local del proyecto
- script: 'npx gulp'
  displayName: 'Run gulp tasks'


# ✅ Escribir información de la compilación
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

# ✅ Restaurar dependencias del proyecto .NET
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# ✅ Construir el proyecto en modo Release
- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

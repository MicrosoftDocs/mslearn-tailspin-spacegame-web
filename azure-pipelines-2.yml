trigger:
  - '*'

pool:
  name: 'RetoAzure'  # Nombre del pool donde está MyAgent
  demands:
    - agent.name -equals MyAgent

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK 6.x'
  inputs:
    packageType: sdk
    version: '6.x'

# Usa Node.js 18.x en lugar de la versión incompatible
- task: UseNode@1
  displayName: 'Use Node.js 18.x'
  inputs:
    version: '18.x'

# Limpiar caché de npm
- script: 'npm cache clean --force'
  displayName: 'Clear npm cache'

# Eliminar node_modules y package-lock.json antes de instalar dependencias
- script: |
    rm -rf node_modules package-lock.json
    npm install --legacy-peer-deps
  displayName: 'Run npm install'

# Compilar archivos Sass
- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
  displayName: 'Compile Sass assets'

# Ejecutar tareas de Gulp
- task: gulp@1
  displayName: 'Run gulp tasks'

# Escribir información de compilación en un archivo
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

# Restaurar dependencias del proyecto .NET
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Compilar el proyecto en modo Release
- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'
